using AutoFixture;
using EqlibApi.Models;
using EqlibApi.Models.Enums;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;

namespace EqlibApi.Tests.Integration.Utils
{
    public static class DbContextTestHelper
    {
        public static void DeleteAllFromDb(ApplicationContext context)
        {
            using var transaction = context.Database.BeginTransaction();
            try
            {
                context.Database.ExecuteSqlRaw("delete from \"Items\";");
                context.Database.ExecuteSqlRaw("delete from \"ItemGroups\";");
                context.Database.ExecuteSqlRaw("delete from \"Checkouts\";");
                context.SaveChanges();

                transaction.Commit();
            } catch { }
        }

        public static ApplicationContext CreateAppContext()
        {
            var optsBuilder = new DbContextOptionsBuilder<ApplicationContext>();
            optsBuilder.UseNpgsql(Environment.GetEnvironmentVariable("CONNECTION_STRING"));
            optsBuilder.EnableSensitiveDataLogging();

            return new ApplicationContext(optsBuilder.Options);
        }

        /// <summary>
        /// Populates the ApplicationContext with Item entities generated by AutoFixture
        /// </summary>
        /// <param name="context">The ApplicationContext configured</param>
        /// <returns>The IEnumerable of items created</returns>
        public static IEnumerable<Item> PopulateWithItems(ApplicationContext context)
        {
            var fixture = new Fixture();
            var fixtures = fixture.CreateMany<Item>();

            context.Items.AddRange(fixtures);
            context.SaveChanges();
            return fixtures;
        }

        /// <summary>
        /// Populates the ApplicationContext with Item entities with the specified availability.
        /// </summary>
        /// <param name="context">The ApplicaitonContext configured</param>
        /// <param name="avail">The EAvailability for all items to have</param>
        /// <returns>The IEnumerable of items created</returns>
        public static IEnumerable<Item> PopulateWithItems(ApplicationContext context, EAvailability avail)
        {
            var fixture = new Fixture();
            var fixtures = fixture.Build<Item>()
                .With(f => f.Availability, avail)
                .CreateMany();

            context.Items.AddRange(fixtures);
            context.SaveChanges();
            return fixtures;
        }
    }
}
